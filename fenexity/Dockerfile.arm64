# ARM64-optimierte MicroOCPP Simulator mit konfigurierbarem API-Port
FROM arm64v8/alpine:latest

# Update package lists and install necessary dependencies
RUN apk update && \
    apk add --no-cache \
    git \
    cmake \
    openssl-dev \
    build-base \
    nodejs \
    npm

# Set the working directory inside the container
WORKDIR /MicroOcppSimulator

# Copy your application files to the container's working directory
COPY . .

# Initialize submodules if not already done
RUN git submodule update --init --recursive || echo "Submodules already initialized"

# Patch main.cpp to use environment variables for WebSocket URL and Charger ID
RUN echo "Patching main.cpp to use environment variables..." && \
    cp src/main.cpp src/main.cpp.backup && \
    # Add stdlib.h header if not already present \
    grep -q "#include <cstdlib>" src/main.cpp || sed -i '1i#include <cstdlib>' src/main.cpp && \
    # Add helper function after includes \
    sed -i '/^#include <cstdlib>/a\\nconst char* getEnvOrDefault(const char* name, const char* defaultValue) {\n    const char* value = getenv(name);\n    return value ? value : defaultValue;\n}' src/main.cpp && \
    # Replace nur CHARGER_ID mit helper function, CENTRAL_SYSTEM_URL bleibt default \
    sed -i 's|"charger-01"|getEnvOrDefault("CHARGER_ID", "charger-01")|g' src/main.cpp && \
    echo "main.cpp patched successfully (only CHARGER_ID from env, CENTRAL_SYSTEM_URL from JSON)" && \
    echo "Patched helper function:" && \
    grep -A 4 "getEnvOrDefault" src/main.cpp | head -5

# Build the simulator backend
RUN cmake -S . -B ./build
RUN cmake --build ./build -j 4 --target mo_simulator

# Grant execute permissions to the simulator binary
RUN chmod +x /MicroOcppSimulator/build/mo_simulator

# Build the WebApp Frontend mit Override-Dateien
WORKDIR /MicroOcppSimulator/webapp-src
RUN npm install
RUN npm run build

# Copy the built webapp to public directory (not webapp)
RUN mkdir -p /MicroOcppSimulator/public
RUN cp -r /MicroOcppSimulator/webapp-src/dist/* /MicroOcppSimulator/public/

# Return to the main directory
WORKDIR /MicroOcppSimulator

# Expose port (will be configured via docker-compose)
EXPOSE 8000

# Create a startup script that replaces the API URL at runtime
RUN echo '#!/bin/sh' > /start.sh && \
    echo 'API_PORT=${API_PORT:-8000}' >> /start.sh && \
    echo 'CHARGER_ID=${CHARGER_ID:-charger-01}' >> /start.sh && \
    echo 'echo "Setting API port to: $API_PORT"' >> /start.sh && \
    echo 'echo "Setting Charger ID to: $CHARGER_ID"' >> /start.sh && \
    echo '# Note: CENTRAL_SYSTEM_URL wird Ã¼ber init-config.sh in JSON-Dateien gesetzt' >> /start.sh && \
    echo '# Update WebApp API configuration - nur Charger ID, nicht CENTRAL_SYSTEM_URL' >> /start.sh && \
    echo 'echo "Updating WebApp API configuration..."' >> /start.sh && \
    echo 'if [ -f /MicroOcppSimulator/mo_store/ws-conn.jsn ]; then' >> /start.sh && \
    echo '  sed -i "s|\"value\":\"charger-01\"|\"value\":\"$CHARGER_ID\"|g" /MicroOcppSimulator/mo_store/ws-conn.jsn' >> /start.sh && \
    echo '  echo "WebApp API configuration updated"' >> /start.sh && \
    echo 'else' >> /start.sh && \
    echo '  echo "Warning: ws-conn.jsn not found"' >> /start.sh && \
    echo 'fi' >> /start.sh && \
    echo '# Handle compressed bundle.html.gz file' >> /start.sh && \
    echo 'if [ -f /MicroOcppSimulator/public/bundle.html.gz ]; then' >> /start.sh && \
    echo '  echo "Decompressing bundle.html.gz..."' >> /start.sh && \
    echo '  gunzip /MicroOcppSimulator/public/bundle.html.gz' >> /start.sh && \
    echo '  echo "Replacing API URLs in bundle.html..."' >> /start.sh && \
    echo '  sed -i "s|localhost:8000|localhost:$API_PORT|g" /MicroOcppSimulator/public/bundle.html' >> /start.sh && \
    echo '  echo "Recompressing bundle.html..."' >> /start.sh && \
    echo '  gzip /MicroOcppSimulator/public/bundle.html' >> /start.sh && \
    echo '  echo "Frontend URL replacement complete"' >> /start.sh && \
    echo 'fi' >> /start.sh && \
    echo '# Fix main.js with hardcoded localhost:8000' >> /start.sh && \
    echo 'if [ -f /MicroOcppSimulator/public/main.js ]; then' >> /start.sh && \
    echo '  echo "Replacing API URLs in main.js..."' >> /start.sh && \
    echo '  sed -i "s|localhost:8000|localhost:$API_PORT|g" /MicroOcppSimulator/public/main.js' >> /start.sh && \
    echo '  echo "main.js URL replacement complete"' >> /start.sh && \
    echo 'fi' >> /start.sh && \
    echo 'echo "Starting MicroOCPP Simulator..."' >> /start.sh && \
    echo 'exec /MicroOcppSimulator/build/mo_simulator' >> /start.sh && \
    chmod +x /start.sh

# Start the container with the script
CMD ["/start.sh"]
